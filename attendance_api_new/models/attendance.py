# -*- coding: utf-8 -*-from odoo import api, fields, models,_from datetime import timedelta, datetimefrom odoo.exceptions import ValidationErrorclass HRAttendance(models.Model):    _inherit = 'hr.attendance'    check_in_record_id = fields.Integer('Check in Record ID')    check_out_record_id = fields.Integer('Check out Record ID')    attend_record_log_check_in_id = fields.Many2one('machine.attendance.record',                                                    string='Attendance Record Log Check IN')    attend_record_log_check_out_id = fields.Many2one('machine.attendance.record',                                                     string='Attendance Record Log Check Out')    def date_range(self, date_from, date_to, delta=timedelta(days=1)):        sorted_date_list = []        # iterate over range of dates        while (date_from <= date_to):            sorted_date_list.append(date_from)            date_from += delta        return sorted_date_list    def download_attendance_from_machine(self, date_from=False, date_to=False, employees=False):        if not date_from:            date_from = fields.Date.today()        if not date_to:            date_to = fields.Date.today()        if self.env.context.get('cron_job'):            last_check_in = self.search([('check_in', '<=', fields.Datetime.now())], order='check_in DESC', limit=1)            if last_check_in:                date_from = last_check_in.check_in.date()            else:                first_machine_record = self.env['machine.attendance.record'].search(                    [('punch_time', '<=', fields.Datetime.now())], order='punch_time ASC', limit=1)                if first_machine_record:                    date_from = first_machine_record.punch_time.date()            domain = [('punch_date', '>', date_from), ('punch_date', '<=', date_to)]        else:            domain = [('punch_date', '>=', date_from), ('punch_date', '<=', date_to), ('state', '=', 'success')]        if employees:            domain.append(('employee_id', 'in', employees.ids))        matching_machine_records = self.env['machine.attendance.record'].sudo().search(domain)        if not matching_machine_records:            raise ValidationError(                _("The selected period records have to be in success state inside the machine attendance records"))        matching_machine_records.action_create_attendance()    def create_attendance_from_machine(self):        self.with_context(cron_job=True).download_attendance_from_machine()
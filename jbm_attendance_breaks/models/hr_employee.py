# -*- coding: utf-8 -*-from odoo import models, fields, api, _from datetime import datetime, dateclass HrEmployee(models.Model):    _inherit = 'hr.employee'    # attendance_sheet_ids = fields.One2many(domain=[('attendance_state', '!=', 'break')])    employee_violation_balance = fields.Float(string='Violations Balance', compute="_get_remaining_violation_balance")    def _get_remaining_violation_balance(self):        for rec in self.sudo():            max_allowed_violation_hours = rec.env.company.max_allowed_hours            if rec.attendance_sheet_ids:                filtered_records = rec.attendance_sheet_ids.filtered(                    lambda x: x.attendance_state not in [                        'attendance'] and x.date.month == date.today().month and x.date.year == date.today().year)                if filtered_records:                    leave_hours = 0                    late_check_ins = sum(                        filtered_records.filtered(lambda x: x.late_check_in > 0).mapped('late_check_in'))                    early_check_outs = sum(                        filtered_records.filtered(lambda x: x.early_check_out > 0).mapped('early_check_out'))                    breaks_hours = sum(                        filtered_records.filtered(lambda x: x.break_time > 0).mapped('break_time'))                    violation_balance = max_allowed_violation_hours - (late_check_ins + early_check_outs + breaks_hours)                    leaves = self.env['hr.leave'].search(                        [('employee_id', '=', rec.id), ('holiday_status_id.request_unit', '=', 'hour')]).filtered(lambda x: x.request_date_from.month == date.today().month and x.request_date_from.year == date.today().year)                    if leaves:                        for leave in leaves:                            leave_hours += leave.number_of_days * 6.5                        violation_balance += leave_hours                    if violation_balance > 0:                        rec.write({                            'allowed_violation_balance': violation_balance,                            'employee_violation_balance': 0 - rec.remaining_balance,                        })                    else:                        rec.write({                            'allowed_violation_balance': 0,                            'employee_violation_balance': violation_balance - rec.remaining_balance + (                                        rec.counter * rec.resource_calendar_id.reference_violation),                        })                else:                    rec.write({                        'allowed_violation_balance': max_allowed_violation_hours,                        'employee_violation_balance': 0 - rec.remaining_balance,                    })            else:                rec.write({                    'allowed_violation_balance': max_allowed_violation_hours,                    'employee_violation_balance': 0,                })    # def create_casual_allocation(self, hours):    #     for rec in self:    #         date_from = date.today() + relativedelta(day=1)    #         date_to = date.today() + relativedelta(day=31, month=12)    #         # allocation = rec.env['hr.leave.allocation'].search([('due_violation', '=', True), ('date_from','=',date_from)])    #         casual_allocations = rec.env['hr.leave.allocation'].search(    #             [('employee_id', '=', rec.id),    #              ('holiday_status_id.is_casual_leave_type', '=', True),    #              ('state', '=', 'validate'), ('date_from', '>=', date_from),    #              '|',    #              ('date_to', '=', False),    #              ('date_to', '>=', date_to)    #              ])    #         allocation_id = casual_allocations.filtered(lambda x: x.due_violation and x.date_from == date_from)    #         other_allocations = casual_allocations.filtered(lambda x: not x.due_violation)    #         balance = 0    #         # if casual_allocations:    #         #     n_of_hours = sum(casual_allocations.mapped('number_of_hours_display'))    #         #     balance = casual_allocations[0].max_leaves - casual_allocations[0].leaves_taken    #         #     # delta = total_violation_hours - max_allowed_violation_hours    #         #     if not balance:    #         #         amount += self.calculate_violation_hours_amount(employee, total_violation_hours)    #         #     elif balance and balance >= total_violation_hours:    #         #         self.create_casual_allocation(payslip, employee, total_violation_hours, date_to)    #         #     elif balance < total_violation_hours:    #         #         remaining_hours = total_violation_hours - balance    #         #         self.create_casual_allocation(payslip, employee, balance, date_to)    #         #         amount += self.calculate_violation_hours_amount(employee, remaining_hours)    #         if allocation_id:    #             pass    #             # if hours < 0:    #             #     balance = 0    #             #     for allocation in other_allocations:    #             #         balance += allocation.max_leaves - allocation.leaves_taken    #             #     allocation.write({'number_of_days': hours / rec.sudo().resource_calendar_id.hours_per_day})    #             # else:    #             #     allocation.unlink()    #         else:    #             for allocation in other_allocations:    #                 balance += allocation.max_leaves - allocation.leaves_taken    #             if balance and balance >= hours:    #                 leave_type = rec.env['hr.leave.type'].search([('is_casual_leave_type', '=', True)])    #                 res = {'name': 'Allocation to settle Violation hours',    #                        'date_from': date_from,    #                        'date_to': date_to,    #                        'number_of_days': -(hours / rec.sudo().resource_calendar_id.hours_per_day),    #                        'employee_id': rec.id,    #                        'allocation_type': 'regular',    #                        'holiday_status_id': leave_type.id,    #                        'due_violation': True    #                        # 'number_of_hours_display': -hours / employee.sudo().resource_calendar_id.hours_per_day    #                        }    #                 allocation = rec.env['hr.leave.allocation'].create(res)    #                 allocation.write({'state': 'validate'})
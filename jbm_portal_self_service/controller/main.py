# -*- coding: utf-8 -*-import ioimport refrom odoo.addons.hr_payroll.controllers.main import HrPayrollfrom odoo.http import request, route, content_dispositionfrom PyPDF2 import PdfFileReader, PdfFileWriterfrom odoo.tools.safe_eval import safe_evalclass HrPayroll(HrPayroll):    @route(["/print/portal/payslips"], type='http', auth='user')    def get_payroll_report_portal_print(self, list_ids='', **post):        if not request.env.user.has_group('jbm_portal_self_service.group_self_service_user') \                or not list_ids or re.search("[^0-9|,]", list_ids):            return request.not_found()        ids = [int(s) for s in list_ids.split(',')]        payslips = request.env['hr.payslip'].browse(ids)        pdf_writer = PdfFileWriter()        for payslip in payslips:            if not payslip.struct_id or not payslip.struct_id.report_id:                report = request.env.ref('hr_payroll.action_report_payslip', False)            else:                report = payslip.struct_id.report_id            report = report.with_context(lang=payslip.employee_id.sudo().address_home_id.lang)            pdf_content, _ = report.sudo()._render_qweb_pdf(payslip.id, data={'company_id': payslip.company_id})            reader = PdfFileReader(io.BytesIO(pdf_content), strict=False, overwriteWarnings=False)            for page in range(reader.getNumPages()):                pdf_writer.addPage(reader.getPage(page))        _buffer = io.BytesIO()        pdf_writer.write(_buffer)        merged_pdf = _buffer.getvalue()        _buffer.close()        if len(payslips) == 1 and payslips.struct_id.report_id.print_report_name:            report_name = safe_eval(payslips.struct_id.report_id.print_report_name, {'object': payslips})        else:            report_name = "Payslips"        pdfhttpheaders = [            ('Content-Type', 'application/pdf'),            ('Content-Length', len(merged_pdf)),            ('Content-Disposition', content_disposition(report_name + '.pdf'))        ]        return request.make_response(merged_pdf, headers=pdfhttpheaders)